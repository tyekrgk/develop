// @charset "utf-8";
define('util',[],function() {
    function object(o){
        function TF(){}
        TF.prototype = o;
        return new TF();
    }

    var util = {
        inheritPrototype: function(subType, parentType){
            var prototypeObj = object(parentType.prototype);
            prototypeObj.constructor = subType;
            subType.prototype = prototypeObj;
        },

        //判断代码是否为港股
        isGg: function(code) {
            return code.indexOf('HK') == 0 || code.indexOf('HS') == 0;
        },
        //判断代码是否为指数
        isIndex: function(code) {
            var indexPattern = /^(1A|1B|1C|399|3C|HSI)/;
            return code.match(indexPattern) ? true : false;
        },
        formatUnit: function(val, fixed, unit) {
            var temp,
                fixed = fixed || 0;
            if (val >= (temp = Math.pow(10, 8))) {
                return (val / temp).toFixed(fixed) + (unit ? '亿' : '');
            } else if (val >= (temp = Math.pow(10, 4))) {
                return (val / temp).toFixed(fixed) + (unit ? '万' : '');
            } else {
                return val;
            }
        },
        // 判断浏览器 名字
        client: function(){
            var ua = navigator.userAgent;
            // var ua = navigator.userAgent+'UCBrowser';
            var platform = navigator.platform;

            var andriodVersion = 0;
            var ieVersion = 0;
            var level = {
                pcSenior:0,
                pcLow:0,
                moveSenior:0,
                moveLow:0
            };

            var browser = {
                chrome:0,
                uc:0,

                // 指pc
                safari:0
            };

            // if return ture : 代表不是ie8 及以下浏览器
            // xp:  IE8 IE7 IE6 Chrome
            function hasCreateElement(){
                return typeof document.createElement == "function";
            }
            var ieNotLow = hasCreateElement();


            if(!ieNotLow){
                level.pcLow = 1;
            }else if(/MSIE ([^;]+)/.test(ua)){
                ieVersion = RegExp["$1"]>>0;
                if(ieVersion>8){
                    level.pcSenior = 1;
                }
            }else if(/Android (\d+\.\d+)/.test(ua)){
                if (/UCBrowser/.test(ua)) {
                    browser.uc = 1;
                };
                andriodVersion = parseFloat(RegExp.$1);
                if (andriodVersion>2.3) {
                    level.moveSenior = 1;
                }else{
                    level.moveLow = 1;
                };
            }else if(ua.indexOf("iPhone") > -1 ||(ua.indexOf("iPad") > -1)){
                level.moveSenior = 1;
            }else if(/Gecko?(:AppleWebKit)?/.test(ua)){
                level.pcSenior = 1;
                if (/Chrome\/(\S+)/.test(ua)) {
                    browser.chrome = 1;
                } else if(/Version\/(\S+)/.test(ua)){
                    browser.safari = 1;
                };
            }else{
                level.pcLow = 1;
            }

            return{
                level:level,
                browser:browser
            }
        }()

    };
    return util;
});

// @charset "utf-8";
/*
 * 针对不同浏览器的 不同处理
 */
define('BrowserStrategy',['util'], function (util){

    var BrowserStrategy = {
        // 针对 uc浏览器，每次url尾部加 ？时间戳
        // 时间戳 根据 interval来判断是 每小时更新2015090101，还是每分钟201509010159
        // interval : 默认 每分钟更新, 可以为 'perMinute' or 'perHour' or 'perDay' 'noTimestamp'这4种
        getUrl:function(url, interval){
            var c = util.client;
            var t;
            if (c.browser.uc) {
                t = new Date();
                var tStr = t.getFullYear() + (t.getMonth()+1<10?'0':'') + (t.getMonth()+1) + (t.getDate()+1<10?'0':'') + t.getDate();
                var tempMin = (t.getMinutes()<10?'0':'') + t.getMinutes();
                var tempHour = (t.getHours()<10?'0':'') + t.getHours();
                if (interval === 'perMinute') {
                    return url + '?' + tStr + tempHour + tempMin;
                }else if (interval === 'perHour') {
                    return url + '?' + tStr + tempHour;
                }else if(interval === 'perDay'){
                    return url + '?' + tStr;
                }else{
                    return url;
                }

            }else{
                return url;
            }

        }
    }

    return BrowserStrategy;
});

// @charset "utf-8";
define('Xhr',['BrowserStrategy'], function (BrowserStrategy){
    /**
     * 获取远程文件中的内容
     * @param  {[type]}   url      [description]
     * @param  {Function} callback [description]
     * @param  {[type]}   code     [股票代码]
     * @return {[type]}            [description]
     */
    function jqGetScript(urlPath, code, callback) {

        var obj = {}
        $.ajax({ 
            url: urlPath, 
            dataType: "script", 
            cache:true, 
            success: function(){
                obj = window['var_'+code];
                callback(obj);
            }

        });

    }

    /**
     * name 为 callback 的name
     * e.g quotebridge_todayline, quotebridge_time
     * interval 是为了解决 仅在uc浏览器上 有过度缓存的bug
     * 注：如果你需要间隔某个时间 请求同一接口，需要设定相应的interval值: 'perMinute', 'perHour', 'perDay', 'noTimestamp'这4种
     */
    var jqXhrWithoutCallback = function(urlPath, callback, name, interval) {
        var xhrHandle;
        interval = interval || 'perMinute';

        var url = BrowserStrategy.getUrl(urlPath, interval);
        // @todo delete
        // (function() {
            // window[name] = function(data){ callback(data); }
            // xhrHandle = $.ajax({
            //     type: "get",
            //     url: url,
            //     dataType : "script",
            //     cache: true, 
            //     success: function(data){
            //         window[name] = undefined;
            //         try{
            //             delete window[name];
            //         }catch(e){}
            //     },
            //     error:function(){
            //         window[name] = undefined;
            //         try{
            //             delete window[name];
            //         }catch(e){}

            //     } 
            // });
            xhrHandle = $.ajax({ 
                url: url, 
                dataType: "jsonp", 
                cache:true, 
                jsonp:false,
                // beforeSend: function(){
                //     console.log('before send~~~');
                //     console.log(arguments);
                // },
                jsonpCallback: name,
                success: function(d, status, xhr){
                    callback(d);
                },
                error:function(xhr, errorType, error){

                }
            });

        // })()
        return xhrHandle;
    }

    return {
        jqGetScript : jqGetScript,
        jqXhrWithoutCallback: jqXhrWithoutCallback
    }
    
});

// @charset "utf-8";
/*
 * 所有数据 测试环境和正式环境配置切换文件
 */
define('UrlConfig',[],function (){
    var UrlConfig = {
        // 正式环境
        urlHost:'http://d.10jqka.com.cn/'
        // 测试环境
        // urlHost:'http://testm.10jqka.com.cn/mobile29/info/d/'
    }

    return UrlConfig;
});

// @charset "utf-8";
define('PureDataProvider',['Xhr', 'UrlConfig'], function (Xhr, UrlConfig){
    var PureDataProvider = function(options){
        var defaultConfigs = {
            url:UrlConfig.urlHost,
            urlVersion:'v2/rank/',
            middlePart: '',
            lastPart:'a3.js',
            isKeepingGet : false,
            intervalTime: 60000,
            callbackName: null,
            success:function(){}
        };

        this.configs = $.extend({}, defaultConfigs, options);
        this.getData();
    }

    PureDataProvider.prototype.getFromWeb = function(callback) {
        var u = '', callbackName = '';
        var middlePart = this.configs.middlePart ? this.configs.middlePart + '/' : '';
        var urlPath = this.configs.url + 
                        this.configs.urlVersion + 
                        middlePart+
                        this.configs.lastPart;
        urlPath = urlPath.replace(/\/$/, '');

        var pathName = this.configs.urlVersion + 
                        middlePart+
                        this.configs.lastPart;

        if(/^(?:(\/))?v[\d]+/.test(this.configs.urlVersion) && !this.configs.callbackName){
            callbackName = 'quotebridge_' + pathName.replace(/\/$/, '').replace(/^\//, '').replace(/\//g, '_').replace('.js', '').replace(/@/g, '').replace(/,/g, '_'); 
        }else{
            callbackName = this.configs.callbackName ? this.configs.callbackName.replace(/@/g, '') :'quotebridge_' + this.configs.urlVersion.replace(/^\//, '').replace(/\//g, '_').replace(/@/g, '');
        }
        
        Xhr.jqXhrWithoutCallback(urlPath, callback, callbackName);
    }

    PureDataProvider.prototype.getData = function() {
        var that = this;
        
        this.getFromWeb(function(data){
            that.configs.success(data);
            if(that.configs.isKeepingGet){
                that.keepingGetData();
            }; 
        });

    }

    PureDataProvider.prototype.keepingGetData = function() {
        var that = this;

        this.keepingGetHandle = setTimeout(function() {
            that.getFromWeb(function(data){
                that.configs.success(data);
            });
            that.keepingGetHandle = setTimeout(arguments.callee, that.configs.intervalTime);
        }, that.configs.intervalTime);

    }

    PureDataProvider.prototype.stopGetData = function() {
        this.configs.isKeepingGet = false;
        clearTimeout(this.keepingGetHandle);
    }
    
    return PureDataProvider;
});

// @charset "utf-8";

require(['PureDataProvider'], function(PureDataProvider) {

    window.hx_canvas_puredataprovider = PureDataProvider;

    ///////////
    // demo  //
    ///////////
    // var sortProvider = null;
    // if (sortProvider) {
    //     sortProvider.stopGetData();
    // }

    // sortProvider = new PureDataProvider({
    //     isKeepingGet : true,
    //     intervalTime: 60000,
    //     middlePart: '17/13',
    //     lastPart:'a3.js',
    //     success:function(d){
    //         console.log(d);
    //     }
    // });

    // var currentProvider = new PureDataProvider({
    //     isKeepingGet : true,
    //     intervalTime: 60000,
    //     urlVersion:'real/hsa/',
    //     lastPart:'300033,600000,000001',
    //     success:function(d){
    //         console.log(d);
    //     }
    // });

});

define("../../demo/PureData/pureDataEntrance", function(){});

